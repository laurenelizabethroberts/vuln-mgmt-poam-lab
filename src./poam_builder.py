# src/poam_builder.py
import csv
from datetime import date, timedelta
from pathlib import Path

import pandas as pd

from mappings import map_controls_for_row
from risk import compute_risk_score
from validate import validate_scan_csv
from utils import today_str

ROOT = Path(__file__).resolve().parents[1]
SCAN = ROOT / "data" / "vuln_scan_sample.csv"         # you can change this
POAM_OUT = ROOT / "docs" / "POAM_filled.csv"

def build_poam():
    df = pd.read_csv(SCAN)
    validate_scan_csv(df)

    rows = []
    start_date = today_str()
    # simple target window (14 days for criticals/highs; adjust as you like)
    def plan_date(sev: str) -> str:
        base = 14 if sev.lower() in ("critical", "high") else 30
        return str(date.today() + timedelta(days=base))

    for i, r in df.iterrows():
        title = r["vuln_title"]
        system = r["host"]
        sev = r["severity"]
        cvss = float(r["cvss_base"])
        exploit = bool(r["exploit_available"])
        criticality = str(r["asset_criticality"]).title()
        cve = r.get("cve", "")

        risk_score = compute_risk_score(cvss, exploit, criticality)
        controls = map_controls_for_row(title)

        # very brief, realistic remediation & milestones examples (customize per repo)
        recommended = []
        milestones = []

        if "log4j" in title.lower():
            recommended = [
                "Apply virtual patch (WAF) to block `${jndi:` patterns",
                "Upgrade log4j-core to 2.17.x+ (vendor-approved)",
                "Remove JndiLookup if upgrade is delayed",
                "Re-scan & validate closure",
            ]
            milestones = [
                f"M1 ({today_str(1)}): WAF rule live",
                f"M2 ({today_str(4)}): Inventory/libs scan complete",
                f"M3 ({today_str(11)}): Upgrade done & tested",
                f"M4 ({plan_date(sev)}): Re-scan; document closure",
            ]
        elif "s3" in title.lower() or "bucket" in title.lower():
            recommended = [
                "Remove public access; enable S3 Block Public Access",
                "Audit IAM & apply least privilege",
                "Enable AWS Config rule to detect public buckets",
                "Validate via Trusted Advisor/Config conformance",
            ]
            milestones = [
                f"M1 ({today_str(1)}): Lock down bucket",
                f"M2 ({today_str(3)}): IAM review complete",
                f"M3 ({today_str(7)}): Config/monitoring enabled",
                f"M4 ({plan_date(sev)}): Validation scan complete",
            ]
        else:
            recommended = [
                "Apply vendor patch/remediation",
                "Validate fix in staging, then production",
                "Re-scan & close finding when risk is reduced",
            ]
            milestones = [
                f"M1 ({today_str(3)}): Remediation plan approved",
                f"M2 ({today_str(10)}): Fix deployed",
                f"M3 ({plan_date(sev)}): Verification scan passed",
            ]

        poam_row = {
            "POAM_ID": f"POAM-2025-{i+1:03d}",
            "System": system,
            "Vulnerability_Title": title,
            "Description": r.get("description", title),
            "Related_CVEs": cve if cve else "N/A",
            "NIST_Controls": controls,
            "Severity": sev,
            "Risk_Score": risk_score,
            "Recommended_Remediation": " ".join(f"{n+1}) {x}" for n, x in enumerate(recommended)),
            "Milestones": " | ".join(milestones),
            "Responsible_Entity": "AppSec; Ops; SOC",
            "Start_Date": start_date,
            "Planned_Completion_Date": plan_date(sev),
            "Status": "Open",
            "Comments": "POA&M generated by lab script; dates illustrative.",
        }
        rows.append(poam_row)

    # Append to existing file or write a new one
    headers = [
        "POAM_ID","System","Vulnerability_Title","Description","Related_CVEs",
        "NIST_Controls","Severity","Risk_Score","Recommended_Remediation",
        "Milestones","Responsible_Entity","Start_Date","Planned_Completion_Date",
        "Status","Comments"
    ]
    POAM_OUT.parent.mkdir(parents=True, exist_ok=True)
    if POAM_OUT.exists():
        # append new rows while avoiding header duplication
        with POAM_OUT.open("a", newline="") as f:
            w = csv.DictWriter(f, fieldnames=headers)
            for row in rows:
                w.writerow(row)
    else:
        with POAM_OUT.open("w", newline="") as f:
            w = csv.DictWriter(f, fieldnames=headers)
            w.writeheader()
            for row in rows:
                w.writerow(row)

    print(f"[OK] POA&M updated â†’ {POAM_OUT}")

if __name__ == "__main__":
    build_poam()
